:root {
    --clr-bright-orange: hsl(31, 77%, 52%);
    --clr-dark-cyan: hsl(184, 100%, 22%);
    --clr-very-dark-cyan: hsl(179, 100%, 13%);

    --clr-trans-white: hsla(0, 0%, 100%, 0.75);
    --clr-light-gray: hsl(0, 0%, 95%);
    
    --ff-regular: 'Lexend Deca', sans-serif;
    --ff-accent: 'Big Shoulders Display', cursive;
    --fw-regular: 400;
    --fw-bold: 700;
}


/*
Josh Comeau's CSS reset
https://www.joshwcomeau.com/css/custom-css-reset/
*/
/*
1. Use a more-intuitive box-sizing model.
*/
*, *::before, *::after {
    box-sizing: border-box;
}
/*
2. Remove default margin
*/
* {
    margin: 0;
}
/*
3. Allow percentage-based heights in the application
*/
/*
Maybe this is something I should overwrite in my own
styles outside of the reset card, but I changed this
from height: 100%; to min-height: 100vh; as the original
causes me clipping issues when the viewport is shorter than
the content.
*/
html, body {
    min-height: 100vh;
}
/*
Typographic tweaks!
4. Add accessible line-height
5. Improve text rendering
*/
body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
}
/*
6. Improve media defaults
*/
img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
}
/*
7. Remove built-in form typography styles
*/
input, button, textarea, select {
    font: inherit;
}
/*
8. Avoid text overflows
*/
p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
}

/* My Styling */
body {
    font-family: var(--ff-regular);
    font-weight: var(--fw-regular);
    font-size: 0.9375rem; /* 15px to rem */
    color: var(--clr-trans-white);
    background-color: var(--clr-light-gray);
    
    display: grid;
    place-content: center;
    padding: 5.5rem 1.5rem;
}

.visually-hidden:not(:focus):not(:active) {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
}

.card-container {
    border-radius: 0.5rem;
    overflow: hidden;
}

@media (min-width: 750px) {
    .card-container {
        max-width: 900px;
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
    }

    .button {
        margin-top: 4rem;
    }
}

.card {
    padding: 3rem;
    display: grid;
    gap: 1.5rem;
}

/*
I made an interesting solution for this 
problem: each card with a unique color sets 
its own value for the --card-color custom 
property, meaning when a button is inside a 
card, the text color of the button can be 
inherited from its appropriate card's 
--card-color
*/
.accent-style-1 {
    --card-color:var(--clr-bright-orange); 
    background-color: var(--clr-bright-orange);
}
.accent-style-2 {
    --card-color:var(--clr-dark-cyan); 
    background-color: var(--clr-dark-cyan);
}
.accent-style-3 {
    --card-color:var(--clr-very-dark-cyan); 
    background-color: var(--clr-very-dark-cyan);
}

.card__icon {
    max-width: 4rem;
    margin-bottom: 0.775rem;
}

.card__title {
    font-family: var(--ff-accent);
    font-weight: var(--fw-bold);
    font-size: 2.5rem;
    color: var(--clr-light-gray);
    text-transform: uppercase;
}

.card > p {
    line-height: 1.525rem;
}

.button {
    text-decoration: none;
    color: var(--card-color);
    background-color: var(--clr-light-gray);
    width: max-content;
    padding: 0.8rem 1.875rem;
    border-radius: 1.5rem;
}

.button:is(:hover, :focus) {
    color: var(--clr-light-gray);
    background-color: var(--card-color);
    box-shadow: inset 0 0 0 2px var(--clr-light-gray);
}

.attribution {
    font-size: 0.65rem; 
    color: var(--clr-very-dark-cyan);
    text-align: center;
}

.attribution a { 
    color: hsl(228, 45%, 44%); 
}
